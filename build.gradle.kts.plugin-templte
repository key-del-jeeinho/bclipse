import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

group = "com.bclipse"
version = "1.0-SNAPSHOT"
val artifactName = "bclipse-XXX" //FIXME
val mcApiVersion: String by project
val simpleMcApiVersion: String by project
val pluginDirectoryPath: String by project
val legacyPluginDirectoryPath: String by project

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id("com.github.johnrengelman.shadow") version "8.0.0"
}

repositories {
    mavenCentral()
    maven("https://hub.spigotmc.org/nexus/content/repositories/snapshots/")
    maven("https://oss.sonatype.org/content/repositories/snapshots")
}

dependencies {
    implementation(kotlin("stdlib-jdk8"))
    compileOnly("org.spigotmc:spigot-api:${mcApiVersion}")
    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    implementation(kotlin("reflect"))
}

val java17 = 17

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(java17))
    }
}

tasks {
    withType<JavaCompile>().configureEach {
        if (java17 >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release.set(java17)
        }
    }

    withType<KotlinCompile>().configureEach {
        kotlinOptions.jvmTarget = java17.toString()
    }

    processResources {
        val placeholders = mapOf(
            "version" to version,
            "apiVersion" to simpleMcApiVersion,
            "kotlinVersion" to project.properties["kotlinVersion"]
        )

        require(placeholders.values.all { it !== null }) {
            "please enter placeholders to gradle.properties"
        }

        filesMatching("plugin.yml") {
            expand(placeholders)
        }
    }

    val configureShadowRelocation by registering(ConfigureShadowRelocation::class) {
        target = shadowJar.get()
        prefix = "${project.group}.${project.name.lowercase()}.libraries"
    }

    build {
        dependsOn(shadowJar).dependsOn(configureShadowRelocation)

        doLast {
            val samePluginInDirectory = fileTree(pluginDirectoryPath) {
                include("${artifactName}-*.jar")
            }
            delete(samePluginInDirectory)

            copy {
                from("build/libs/${artifactName}-${version}-all.jar")
                into(pluginDirectoryPath)
            }

            //TODO auto reload server
        }
    }

    test {
        useJUnitPlatform()
    }
}